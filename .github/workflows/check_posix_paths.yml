name: Check POSIX Paths in Zip File

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check-posix-paths-windows:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2019, windows-2022]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup bun
      uses: oven-sh/setup-bun@v1.1.1
      with:
        bun-version: latest

    - name: Install dependencies
      id: install_code
      run: bun install --frozen-lockfile

    - name: Build code
      id: build_code
      run: bun run build

    - name: Create a zip test
      id: create_zip
      run: node ./dist/index.js bundle zip --path test/test_upload -n build-${{ matrix.os }}.zip

    - name: Upload build.zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-zip-${{ matrix.os }}
        path: build-${{ matrix.os }}.zip

  check-posix-paths-unix:
    runs-on: ubuntu-latest
    needs: check-posix-paths-windows

    steps:
    - name: Download build-windows-2019.zip artifact
      uses: actions/download-artifact@v4
      with:
        name: build-zip-windows-2019
        path: build-windows-2019.zip

    - name: Download build-windows-2022.zip artifact
      uses: actions/download-artifact@v4
      with:
        name: build-zip-windows-2022
        path: build-windows-2022.zip

    - name: Check file sizes
      run: |
        echo "Checking file sizes..."
        ls -lh /home/runner/work/CLI/CLI/build-windows-2019.zip
        ls -lh /home/runner/work/CLI/CLI/build-windows-2022.zip

    - name: Verify ZIP file integrity for Windows 2019 build with zipinfo
      run: |
        echo "Verifying ZIP file integrity for Windows 2019 build with zipinfo..."
        zipinfo /home/runner/work/CLI/CLI/build-windows-2019.zip || (echo "ZIP file is corrupted: build-windows-2019.zip" && exit 1)

    - name: Verify ZIP file integrity for Windows 2022 build with zipinfo
      run: |
        echo "Verifying ZIP file integrity for Windows 2022 build with zipinfo..."
        zipinfo /home/runner/work/CLI/CLI/build-windows-2022.zip || (echo "ZIP file is corrupted: build-windows-2022.zip" && exit 1)

    - name: Verify POSIX paths for Windows 2019 build
      run: |
        unzip /home/runner/work/CLI/CLI/build-windows-2019.zip -d extracted-2019
        error_found=false
        find extracted-2019 -type f | while read -r file; do
          if [[ "$file" =~ "\\" ]]; then
            echo "Non-POSIX path detected: $file"
            error_found=true
          fi
        done
        if [ "$error_found" = true ]; then
          echo "Non-POSIX paths detected in the zip file (Windows 2019)"
          exit 1
        else
          echo "All paths are POSIX compliant in build-windows-2019.zip."
        fi

    - name: Verify POSIX paths for Windows 2022 build
      run: |
        unzip /home/runner/work/CLI/CLI/build-windows-2022.zip -d extracted-2022
        error_found=false
        find extracted-2022 -type f | while read -r file; do
          if [[ "$file" =~ "\\" ]]; then
            echo "Non-POSIX path detected: $file"
            error_found=true
          fi
        done
        if [ "$error_found" = true ]; then
          echo "Non-POSIX paths detected in the zip file (Windows 2022)"
          exit 1
        else
          echo "All paths are POSIX compliant in build-windows-2022.zip."
        fi


    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Compile VerifyZip.java
      run: javac test/VerifyZip.java

    - name: Verify ZIP file integrity for Windows 2019 build with Java
      run: java VerifyZip /home/runner/work/CLI/CLI/build-windows-2019.zip

    - name: Verify ZIP file integrity for Windows 2022 build with Java
      run: java VerifyZip /home/runner/work/CLI/CLI/build-windows-2022.zip
  